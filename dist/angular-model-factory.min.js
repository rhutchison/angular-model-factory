/**
 * modelFactory makes working with RESTful APIs in AngularJS easy
 * @version v0.4.0 - 2015-05-26
 * @link https://github.com/swimlane/model-factory
 * @author Austin McDaniel <amcdaniel2@gmail.com>, Juri Strumpflohner <juri.strumpflohner@gmail.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";!function(global,factory){"function"==typeof define&&define.amd?define(["angular","uri-templates"],factory):"undefined"!=typeof module&&module.exports?module.exports=factory():global.ModelFactory=factory(angular,UriTemplate)}(this,function(angular,UriTemplate){var module=angular.module("modelFactory",[]),forEach=angular.forEach,extend=angular.extend,copy=angular.copy,instanceKeywords=["$$array","$save","$destroy","$pending","$rollback","$diff","$update","$commit","$copy"],staticKeywords=["actions","instance","list","defaults","pk","stripTrailingSlashes","map"],extendDeep=function(dst){return forEach(arguments,function(obj){obj!==dst&&forEach(obj,function(value,key){-1===instanceKeywords.indexOf(key)&&(dst[key]?angular.isArray(dst[key])?dst[key].concat(value.filter(function(v){var vv=-1!==dst[key].indexOf(v);return vv&&extendDeep(vv,v),vv})):angular.isObject(dst[key])?extendDeep(dst[key],value):dst[key]=value:angular.isFunction(dst[key])||(dst[key]=value))})}),dst},shallowClearAndCopy=function(src,dst){dst=dst||{},forEach(dst,function(value,key){src.hasOwnProperty(key)||"$"===key.charAt(0)||delete dst[key]});for(var key in src)src.hasOwnProperty(key)&&"$"!==key.charAt(0)&&(angular.isObject(src[key])&&!angular.isArray(src[key])?dst[key]=shallowClearAndCopy(src[key],dst[key]):dst[key]=src[key]);return dst};module.provider("$modelFactory",function(){var provider=this;provider.defaultOptions={prefix:"",pk:"id",stripTrailingSlashes:!0,defaults:{},map:{},actions:{base:{wrap:!0,beforeRequest:void 0,afterRequest:void 0,cache:!1},get:{method:"GET"},query:{method:"GET",isArray:!0},post:{method:"POST",invalidateCache:!0},update:{method:"PUT",invalidateCache:!0},"delete":{method:"DELETE",invalidateCache:!0}},instance:{},list:{}},provider.$get=["$rootScope","$http","$q","$log","$cacheFactory",function($rootScope,$http,$q,$log,$cacheFactory){function modelFactory(url,options){function ModelCollection(value){value=value||[],value.forEach(function(v,i){null!==v&&void 0!==v&&(value[i]=wrapAsNewModelInstance(v,value))});var __oldPush=value.push;return value.push=function(){for(var args=Array.prototype.slice.call(arguments),i=0;i<args.length;i++)args[i]=wrapAsNewModelInstance(args[i],value);__oldPush.apply(value,args)},options.list&&extend(value,options.list),value}function Model(value){var instance=this,commits=[];value=value||{},forEach(options.defaults,function(v,k){void 0===value[k]&&("function"==typeof v?value[k]=v(value):value[k]=v)}),forEach(options.map,function(v,k){typeof v===Model||typeof v===ModelCollection?value[k]=new v(value[k]):"function"==typeof v?value[k]=v(value[k],value):(value[k]=value[v],delete value[v])}),forEach(options.actions,function(v,k){"$"===k[0]&&(instance[k]=function(){return Model.$buildRequest(k,v,instance)})}),extend(instance,value),extend(instance,copy(options.instance)),instance.$save=function(){var actionType=instance[options.pk]?"update":"post",promise=Model[actionType](this);return instance.$pending=!0,promise.then(function(value){instance.$pending=!1,value&&instance.$update(value);var broadcastName="post"===actionType?"created":"updated";$rootScope.$broadcast(prettyName+"-"+broadcastName,instance),commits.push(angular.toJson(instance))},function(){instance.$pending=!1}),promise},instance.$destroy=function(){var promise=Model["delete"](this);return instance.$pending=!0,promise.then(function(){instance.$pending=!1;var arr=instance.$$array;arr&&arr.splice(arr.indexOf(instance),1),$rootScope.$broadcast(prettyName+"-destroyed",instance)},function(){instance.$pending=!1}),promise},instance.$diff=function(){return DeepDiff.deep(old,instance,function(path,key){return"$"===key[0]})},instance.$commit=function(){return commits.push(angular.toJson(instance)),instance},instance.$rollback=function(version){var prevCommit=commits[version||commits.length-1];return instance.$update(JSON.parse(prevCommit)),instance},instance.$update=function(n){return shallowClearAndCopy(n,instance),instance},instance.$copy=function(){var rawData=angular.toJson(this);return new Model(angular.fromJson(rawData))},instance.$commit()}var promiseTracker={},nameSplit=url.split("/"),prettyName=nameSplit[nameSplit.length-1];options=extendDeep({},copy(provider.defaultOptions),options);var wrapAsNewModelInstance=function(rawObj,arrayInst){var inst=rawObj.constructor===Model?rawObj:new Model(rawObj);return inst.$$array=arrayInst,inst};return Model.$cache=$cacheFactory(url),forEach(options.actions,function(v,k){"base"!==k&&"$"!==k[0]&&(Model[k]=function(){var args=Array.prototype.slice.call(arguments);return Model.$buildRequest.apply(this,[k,v].concat(args))})}),Model.$buildRequest=function(action,param,data,extras){var clone=copy(options.actions.base);extend(clone,copy(param)),clone.cache===!0&&(clone.cache=Model.$cache),clone.method=clone.method||"GET";var uri=options.prefix?options.prefix+"/":"";if(clone.override)uri=clone.url;else if(uri+=url,clone.url&&(uri+="/"+clone.url),uri=Model.$url(uri,data,clone.method),("get"===action||"post"===action||"update"===action||"delete"===action)&&(uri+="/{"+options.pk+"}"),"GET"===clone.method&&(angular.isString(data)||angular.isNumber(data))){var obj={};obj[options.pk]=data,data=obj,extras&&(data.param=extras,uri+="{?param*}")}else"GET"===clone.method&&angular.isObject(data)&&(data={param:data},uri+="{?param*}");return clone.url=Model.$url(uri,data,clone.method),"delete"!==action&&"DELETE"!==clone.method&&(clone.data=data),Model.$call(clone)},Model.$call=function(params){var signature=params.method+":"+params.url;if(promiseTracker[signature])return promiseTracker[signature];var def=$q.defer();return promiseTracker[signature]=def.promise,params.data=copy(params.data),params.beforeRequest&&params.beforeRequest(params),params.data=Model.$strip(params.data),$http(params).success(function(response){if(params.afterRequest){var transform=params.afterRequest(response);transform&&(response=transform)}params.invalidateCache&&Model.$cache.removeAll(),response?params.wrap?params.isArray?def.resolve(new Model.List(response)):def.resolve(new Model(response)):def.resolve(response):def.resolve(),promiseTracker[signature]=void 0}).error(function(response){promiseTracker[signature]=void 0,def.reject(response)}),def.promise},Model.$url=function(u,params,method){var uri=new UriTemplate(u||url).fill(function(variableName){var resolvedVariable=params[variableName];return resolvedVariable?("GET"===method&&delete params[variableName],resolvedVariable):null});return options.stripTrailingSlashes&&(uri=uri.replace(/\/+$/,"")||"/"),uri},Model.$strip=function(args){return args&&"object"==typeof args&&forEach(args,function(v,k){instanceKeywords.indexOf(k)>-1&&delete args[k]}),args},forEach(options,function(v,k){-1===staticKeywords.indexOf(k)&&(Model[k]=v)}),Model.List=ModelCollection,Model}return modelFactory}]})});